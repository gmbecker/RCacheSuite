\name{evalWithCache}
\alias{evalWithCache}
%- Also NEED an '\alias' for EACH other topic documented here.
\title{
Evaluate a piece of code with caching
}
\description{
  This function accepts a piece of R code and performs state (input
  variable value) dependent cached evaluation  of it.
}
\usage{
evalWithCache(code, codeInfo, inputVars, outputVars, cache = cachingEngine(write_on_cache = TRUE), env = .GlobalEnv, force = FALSE, cacheRand = FALSE, verbose = FALSE, gexts = "png", gdev = sapply(gexts, function(nm) get(nm, mode = "function")), ...)
}
\arguments{
  \item{code}{
    The code to be evaluated.
}
  \item{codeInfo}{
    Information about the code, must be an S4 class with slots
    \code{inputs} and \code{outputs}. If not specified this will be
    determined automatically.
}
  \item{inputVars}{
    A character vector listing the variable names \code{code} uses
    without first defining. These will be inpected and a hash of their
    values will be used in cache creation and lookup.
}
  \item{outputVars}{
    A character vector listing the names of variables created or
    modified by \code{code}. The values of these variables will be
    stored in and retrieved from the caches.
}
  \item{cache}{ 
    A \code{CachingEngine} object representing the caching mechanism to
    be used. By default a local (not returned) is created which
    immediately writes any created caches to disk. If provided, the
    object passed into \code{cache} will be updated during the call to
    evalWithCache due to the fact it is a reference class.
}
  \item{env}{
    The environment in which the code should be evaluated or the cached
    variable values should be loaded into.
    
}
  \item{force}{
    Should the code be re-evaluated even if a matching cache is
  found. Defaults to \code{FALSE}.
}
  \item{cacheRand}{
    Should results from evaluating code blocks where randomness is
  detected (see details) be cached? Defaults to \code{FALSE}.
}
  \item{verbose}{
    Should extra information be printed during the
  evaluation/cache-lookup process be printed to the console? Defaults to \code{FALSE}.
}
  \item{gexts}{
    The names of the graphics device functions/extensions which should
  be used to save graphics generated during evaluation of the
  code. Defaults to \code{"png"}.
    
}
  \item{gdev}{
    A list of graphics device functions which should be used to save
  plots generated during evaluation of the code. Overrides \code{gexts}.
}
  \item{\dots}{
    Extra arguments to be passed to \code{cache}'s evaluation function.
}
}
\value{
  The value generated by \code{cache$return_handler} when called on the
  value returned by evaluating \code{code} using \code{cache$eval_fun}.

  In other words, the value
  \preformatted{
    cache$return_handler(cache$eval_fun(code, env, ...))
  }
  is returned, though if a valid cache is found,
  \code{cache$eval_fun} is not called and the cached return value is
  passed to \code{cache$return_handler}.
  
  The return value of \code{cache$return_handler} is returned
  invisibly. The \code{cache$return_handler} function itself is
  responsible for the duplication of any side effects, including any
  printing of errors, warnings, or messages as well as any necessary
  regeneration of graphical output. 
}
\author{
Gabriel Becker
}
\seealso{
  \code{\linkS4class{CachingEngine}},
  \code{\link{parseWithVis}}. \code{\link[CodeDepends]{getInputs}}
}
\examples{
\dontrun{
    res = evalWithCache("x = 5; y = x+7;y")
}
}
% Add one or more standard keywords, see file 'KEYWORDS' in the
% R documentation directory.
\keyword{ programming }
\keyword{ caching }
